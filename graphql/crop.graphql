type Crop {
    id: ID!
    name: String!
    active: Boolean!
    "Days since have been activated"
    day: Int!
    "Total days to cultivate crop"
    days: Int!
    stages: [Stage]!
    stageCount: Int! @count(relation: "stages")
    activeStage: Stage
    "Date in which crop cultivation has been enabled. Only one crop will have this prop set at a time"
    activeSince: DateTime @rename(attribute: "active_since")
    activeUntil: DateTime
    createdAt: DateTime! @rename(attribute: "created_at")
    updatedAt: DateTime! @rename(attribute: "updated_at")
}

extend type Query {
    activeCrop: Crop @first(scopes: ["active"])

    crop(
        "Search by primary key."
        id: ID @eq @rules(apply: ["prohibits:name", "required_without:name"])

        "Search by name."
        name: String
            @eq
            @rules(apply: ["prohibits:id", "required_without:id", "name"])
    ): Crop! @find

    crops(
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        name: String @where(operator: "like")
    ): [Crop!]! @all
}

input CropInput @validator {
    id: ID
    name: String!
}

type Mutation {
    activateCrop(
        id: ID!
            @rules(
                apply: ["exists:crops", "exists:stages,crop_id"]
                messages: [
                    {
                        rule: "exists"
                        message: "El cultivo no existe o no tiene etapas definidas"
                    }
                ]
            )
    ): Crop!
    deactivateCrop: Int!
    upsertCrop(data: CropInput! @spread): Crop! @upsert
    deleteCrop(id: ID! @rules(apply: ["exists:crops"]) @eq): Crop! @delete
}
