interface Sensors {
    consumption: Float!

    "Greenhouse temperature"
    inside_temperature: Float!

    "External temperature"
    outside_temperature: Float!

    "Greenhouse humidity"
    inside_humidity: Float!

    "External temperature"
    outside_humidity: Float!

    "Greenhouse soil humidity"
    soil_humidity: Float!

    "Greenhouse li"
    inside_lighting: Float!

    "External temperature"
    outside_lighting: Float!
}

type Measure implements Sensors {
    "Unique primary key."
    id: ID!

    "Electricity consumption."
    consumption: Float!

    "Greenhouse temperature"
    inside_temperature: Float!

    "External temperature"
    outside_temperature: Float!

    "Greenhouse humidity"
    inside_humidity: Float!

    "External temperature"
    outside_humidity: Float!

    "Greenhouse soil humidity"
    soil_humidity: Float!

    "Greenhouse li"
    inside_lighting: Float!

    "External temperature"
    outside_lighting: Float!

    "When the measure was taken"
    created_at: DateTime!

    "When the measure was last updated."
    updated_at: DateTime!
}

type MeasureStatistic implements Sensors {
    "Electricity consumption."
    consumption: Float!

    "Greenhouse temperature"
    inside_temperature: Float!

    "External temperature"
    outside_temperature: Float!

    "Greenhouse humidity"
    inside_humidity: Float!

    "External temperature"
    outside_humidity: Float!

    "Greenhouse soil humidity"
    soil_humidity: Float!

    "Greenhouse li"
    inside_lighting: Float!

    "External temperature"
    outside_lighting: Float!
}

extend type Query {
    "Find a single stage by an identifying attribute."
    measure("Search by primary key." id: ID! @eq): Measure @find

    "Get last measure"
    lastMeasure: Measure @first(scopes: ["last"])

    "Get measures by date"
    measures(created_at: DateTimeRange! @whereBetween): [Measure!]! @all

    "Get measures average grouped by day"
    measuresAverageByDay(
        created_at: DateRange! @whereBetween
    ): [MeasureStatistic!]!

    # "Get measures average grouped by hour"
    measuresAverageByHour(
        created_at: DateTimeRange! @whereBetween
    ): [MeasureStatistic!]!

    # "Get measures average of a period"
    measuresAverage(
        created_at: DateTimeRange! @whereBetween
    ): [MeasureStatistic!]!
}
